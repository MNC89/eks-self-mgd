name: 'Workflow - Deploy on multi-account AWS with Terraform'
on:
  # trigger/start job when push happens to any of specified branches
  push:
    branches:
    - feature/**
    - main
    # - staging
# required permissions by GitHub Actions for assuming AWS IAM role
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
env:
  AWS_REGION: "us-east-1"
  # ENVIRONMENT_STAGE: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}
  # since production and staging are not ready, deploy only to dev for now
  ENVIRONMENT_STAGE: "dev"

jobs:
  deploy-terraform:
    runs-on: ubuntu-latest
    # default settings to apply for all the steps
    defaults:
      run:
        working-directory: ./roots/devops-project-main
        shell: bash
    # environment: ${{ (github.ref == 'refs/heads/main' && 'production') || (github.ref == 'refs/heads/staging' && 'staging') || 'dev' }}
    # since production and staging are not ready, deploy only to dev for now
    environment: dev
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # equivalent of "git clone repo"
      - uses: actions/checkout@v3

      # login to AWS
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          role-session-name: GitHubActionsRoleSession
          aws-region: ${{ env.AWS_REGION }}

      # Install eksctl in order to create self managed node group
      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
          terraform init -backend-config="bucket=${AWS_ACCOUNT_ID}-state-bucket-${ENVIRONMENT_STAGE}" -backend-config="key=${GITHUB_REF#refs/heads/}.tfstate"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false -var-file=${ENVIRONMENT_STAGE}.tfvars

      # Build infrastructure according to Terraform configuration files
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file=${ENVIRONMENT_STAGE}.tfvars

      - name: Capture Terraform Outputs
        id: capture-outputs
        run: |
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "PUBLIC_ID_1=$(terraform output -raw public_id_1)" >> $GITHUB_ENV
          echo "PUBLIC_ID_2=$(terraform output -raw public_id_2)" >> $GITHUB_ENV
          echo "PUBLIC_ID_3=$(terraform output -raw public_id_3)" >> $GITHUB_ENV
          echo "EKS_SG=$(terraform output -raw eks_sg)" >> $GITHUB_ENV

      # Login to EKS
      - name: Login to EKS - update kubeconfig
        run: aws eks update-kubeconfig --name final-project-eks-cluster-${ENVIRONMENT_STAGE} --region $AWS_REGION

      # Deploy ingress controller
      - name: Deploy ingress-nginx controller
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.10.1/deploy/static/provider/aws/deploy.yaml
        
      # Deploy Self Mangaged Nodegroup
      - name: Create Self Managed Nodegroup
        run: |
          envsubst < ./eksctl_resources/clusterconfig.yaml.tpl > ./eksctl_resources/clusterconfig.yaml
          echo "Printing the substituted clusterconfig.yaml file for debugging:"
          cat ./eksctl_resources/clusterconfig.yaml
          eksctl create nodegroup --config-file=./eksctl_resources/clusterconfig.yaml

      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve -input=false -var-file=${ENVIRONMENT_STAGE}.tfvars
